using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GenericParsingLibrary
{
    /// <summary>
    /// The type of token to check when parsing.
    /// 
    /// They can be interpreted in any way desired and overlapping types
    /// exist purely for convenience, e.g. Boolean and Keyword exist even though
    /// a boolean may be a keyword.
    /// </summary>
    public enum TokenType
    {
        /// <summary>
        /// An identifier is generally a word that does not contain whitespace, symbols or quotes.
        /// </summary>
        Identifier,
        /// <summary>
        /// A keyword is a special word that cannot be used as an identifier but usually follows the same rules as an identifier.
        /// </summary>
        Keyword,
        /// <summary>
        /// A symbol a char or small string that has a special purpose in a language. E.g. '=', '>=', '{', '}'
        /// </summary>
        Symbol,
        /// <summary>
        /// A string is a set of characters enclosed between matching symbols, e.g. "This is a string"
        /// </summary>
        String,
        /// <summary>
        /// A number is a generic version of the more specific types (like <see cref="Integer"/>.
        /// It can be used if all numbers resolve to a single type.
        /// </summary>
        Number,
        /// <summary>
        /// An integer is a whole number with no decimal places.
        /// </summary>
        Integer,
        /// <summary>
        /// A float is usually a number with decimal places.
        /// </summary>
        Float,
        /// <summary>
        /// A decimal is a general version of a float and can be used to denote floating point numbers of higher precision.
        /// </summary>
        Decimal,
        /// <summary>
        /// A boolean is 'true' or 'false'.
        /// </summary>
        Boolean,
        /// <summary>
        /// Whitespace is the "empty" space between characters and is usually not captured, but some languages might make use of it, e.g. Python.
        /// </summary>
        WhiteSpace,
        /// <summary>
        /// A comment is a message left by programmers.
        /// </summary>
        Comment
    }

    /// <summary>
    /// Holds information about a token encountered during the tokenization process.
    /// Generated by <see cref="GenericTokenizer"/> or a sub class.
    /// </summary>
    public class GenericToken
    {
        /// <summary>
        /// Type of the token. Used mostly with <see cref="GenericParser.Eat(TokenType[])"/> methods..
        /// </summary>
        public TokenType TokenType { get; private set; }
        /// <summary>
        /// Value of the token from the source as a string.
        /// This should be parsed to the desired type in your parsing class.
        /// </summary>
        public string Value { get; private set; }
        public int Index { get; private set; }
        /// <summary>
        /// Line number in the source string that this token was encountered at.
        /// </summary>
        public int LineNumber { get; private set; }
        /// <summary>
        /// Line position on the line in the source string this token was encountered at.
        /// </summary>
        public int LinePosition { get; private set; }

        public GenericToken(TokenType tokenType, string value, int index, int lineNumber, int linePosition)
        {
            TokenType = tokenType;
            Value = value;
            Index = index;
            LineNumber = lineNumber;
            LinePosition = linePosition;
        }

    }
}
