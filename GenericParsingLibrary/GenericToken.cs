using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GenericParsingLibrary
{
    /// <summary>
    /// The type of token to check when parsing.
    /// 
    /// They can be interpreted in any way desired and overlapping types
    /// exist purely for convenience, e.g. Boolean and Keyword exist even though
    /// a boolean may be a keyword.
    /// </summary>
    public enum TokenType
    {
        Identifier,
        Keyword,
        Symbol,
        String,
        Number,
        Integer,
        Float,
        Decimal,
        Boolean,
        WhiteSpace,
        Comment
    }

    /// <summary>
    /// Holds information about a token encountered during the tokenization process.
    /// Generated by <see cref="GenericTokenizer"/> or a sub class.
    /// </summary>
    public class GenericToken
    {
        /// <summary>
        /// Type of the token. Used mostly with <see cref="GenericParser.Eat"/>.
        /// </summary>
        public TokenType TokenType { get; private set; }
        /// <summary>
        /// Value of the token from the source as a string.
        /// This should be parsed to the desired type in your parsing class.
        /// </summary>
        public string Value { get; private set; }
        public int Index { get; private set; }
        /// <summary>
        /// Line number in the source string that this token was encountered at.
        /// </summary>
        public int LineNumber { get; private set; }
        /// <summary>
        /// Line position on the line in the source string this token was encountered at.
        /// </summary>
        public int LinePosition { get; private set; }

        public GenericToken(TokenType tokenType, string value, int index, int lineNumber, int linePosition)
        {
            TokenType = tokenType;
            Value = value;
            Index = index;
            LineNumber = lineNumber;
            LinePosition = linePosition;
        }

    }
}
